<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Einführung on Metamorph Hacks</title>
    <link>https://sschuepbach.github.io/metamorph-hacks/einfuehrung/</link>
    <description>Recent content in Einführung on Metamorph Hacks</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-ch</language>
    <lastBuildDate>Thu, 23 Aug 2018 14:41:00 +0200</lastBuildDate>
    
	<atom:link href="https://sschuepbach.github.io/metamorph-hacks/einfuehrung/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Metamorph</title>
      <link>https://sschuepbach.github.io/metamorph-hacks/einfuehrung/metamorph/</link>
      <pubDate>Thu, 23 Aug 2018 14:47:00 +0200</pubDate>
      
      <guid>https://sschuepbach.github.io/metamorph-hacks/einfuehrung/metamorph/</guid>
      <description>Innerhalb von Metafacture nimmt Metamorph die Rolle einer DSL (&amp;ldquo;Domain-specific language&amp;rdquo;) ein, mit welcher einzelne Schlüssel-Wert-Paare (sogenannte Literale) von Datensätzen transformiert oder gefiltert werden. Dafür werden Regeln (&amp;ldquo;Metamorph&amp;rdquo;- oder kurz &amp;ldquo;Morph-Definition&amp;rdquo;) festgelegt, welche anschliessend durch Metafacture auf einzelne Felder (identifiert durch Schlüssel-/Feldnamen) angewendet werden. Diese Regeln sind als XML-Elemente formuliert, und daher sind auch Metamorph-Dateien &amp;ldquo;normale&amp;rdquo; XML-Dateien.
Einen umfassenden Überblick über die erlaubten Elemente gibt das Metamorph-Schema.
 XML-Struktur Jede Morph-Definition muss innerhalb des &amp;lt;metamorph&amp;gt;-Elementes abgelegt werden:</description>
    </item>
    
    <item>
      <title>Hinweise zu Codebeispielen</title>
      <link>https://sschuepbach.github.io/metamorph-hacks/einfuehrung/hinweise-codebeispiele/</link>
      <pubDate>Thu, 23 Aug 2018 14:44:00 +0200</pubDate>
      
      <guid>https://sschuepbach.github.io/metamorph-hacks/einfuehrung/hinweise-codebeispiele/</guid>
      <description>Formeta In der Dokumentation finden sich immer wieder Codebeispiele. Ein- und Ausgaben werden dabei im sog. Formeta-Format dargestellt. Formeta hat lediglich zwei Bausteine: Literale (Schlüssel-Wert-Paare) und Entitäten (Objekte, die Literale oder weitere Entitäten enthalten). Weiter gelten folgende Regeln:
 Jeder Datensatz ist eine Entität Literale werden in der Form schlüssel: wert geschrieben und mit Kommata (,) voneinander getrennt Entitäten werden in der Form schlüssel { &amp;lt;objektinhalt&amp;gt; } geschrieben und können optional mit Kommata voneinander getrennt werden (Achtung: Zwischen schlüssel und { hat es im Unterschied zu JSON keinen Doppelpunkt!</description>
    </item>
    
  </channel>
</rss>